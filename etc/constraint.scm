#!/usr/bin/env guile
!#
; https://www.saylor.org/site/wp-content/uploads/2011/06/MA221-6.1.pdf
(use-modules (glut) (gl) (gl low-level) (glu) (srfi srfi-1) (srfi srfi-26))

;(define dt 0.08)
(define dt 0.08)

(define v 200)
(define px 320)
(define py 120)
(define qx 320)
(define qy 360)
(define l (- qy py))
(define px_ (- px (* v dt)))
(define py_ py)
(define qx_ (+ qx (* v dt)))
(define qy_ qy)

(define (sqr x) (* x x))

(define main-window #f)

(define i 0)

(define (verlet)
  (define mx (- (* 2 px) px_))
  (define my (- (* 2 py) py_))
  (define nx (- (* 2 qx) qx_))
  (define ny (- (* 2 qy) qy_))
  (set! px_ px)
  (set! py_ py)
  (set! px mx)
  (set! py my)
  (set! qx_ qx)
  (set! qy_ qy)
  (set! qx nx)
  (set! qy ny)
  (let* [(d  (sqrt (+ (sqr (- qx px)) (sqr (- qy py)))))
         (ox (* 0.5 (- l d) (/ (- qx px) d)))
         (oy (* 0.5 (- l d) (/ (- qy py) d)))]
    (if (zero? (remainder i 50))
      (format #t "speed ~a\n" (/ (sqrt (+ (sqr (- px px_)) (sqr (- py py_)))) dt)))
    (set! i (1+ i))
    (set! px (- px ox))
    (set! py (- py oy))
    (set! qx (+ qx ox))
    (set! qy (+ qy oy))))

(define (on-idle)
  (verlet)
  (post-redisplay))

(define (on-display)
  (gl-clear (clear-buffer-mask color-buffer))
  (gl-begin (begin-mode lines)
    (gl-color 0 1 0)
    (gl-vertex px py)
    (gl-vertex qx qy))
  (glPointSize 5)
  (gl-begin (begin-mode points)
    (gl-color 1 0 0)
    (gl-vertex px py)
    (gl-vertex qx qy))
  (swap-buffers))

(define (on-reshape width height)
  (pk 'reshape! width height)
  (gl-viewport 0 0 width height)
  (set-gl-matrix-mode (matrix-mode projection))
  (gl-load-identity)
  (gl-ortho 0 width height 0 -1 +1))

(initialize-glut (program-arguments) #:window-size '(640 . 480) #:display-mode (display-mode rgb double))
(set! main-window (make-window "spring"))
(set-display-callback on-display)
(set-reshape-callback on-reshape)
(set-idle-callback     on-idle)
(set-gl-clear-color 0 0 0 1)
(set-gl-matrix-mode (matrix-mode modelview))
(gl-load-identity)
(glut-main-loop)
